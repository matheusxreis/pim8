@model pim8.Models.UserViewModel
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">

  


    <div class="container-default">
    <div class="profile-info-container">

        <div class="profile-photo-container">
        <div class="avatar-container">
        <img id="profileImg" src="@ViewBag.photo" class="avatar" />
        </div>
        <input 
        class="form-control my-input"
        id="profilePhoto" 
        type="file" />

        <a 
        href="@Url.Action("UpdateAddress", "User")"
        class="link-primary pointer"
        > Alterar Endereço </a>
        </div>
        
        <div class="profile-data-container">

            @* <label for="name-input">Seu nome: <label> *@
            <label for="nameInput">Nome: </label>
           
            <input 
            class="form-control my-input"
            id="nameInput"
            placeholder="Nome"
            value="@ViewBag.name"
            readonly
            />
           <label for="usernameInput">Nome de usuário: </label>
            <input 
            class="form-control my-input"
            id="usernameInput"
            placeholder="Nome de usuário"
            value="@ViewBag.username"
            readonly
            />
            <label for="emailInput">Email: </label>
            <input 
            class="form-control my-input"
            id="emailInput"
            placeholder="E-mail"
            value="@ViewBag.email"
            readonly
            />
            <label for="cpfInput">CPF: </label>
            <input 
            class="form-control my-input"
            id="cpfInput"
            placeholder="CPF"
            value="@ViewBag.cpf"
            readonly
            />
           
          
             
        </div>

         </div>
         <div 
            class="button-container">
            
             <button 
            id="btnDelete"
             type="button" 
            class="btn btn-outline-danger">
            Deletar Conta
            </button>
            <button type="button" 
            id="btnUpload"
            disabled
            class="btn btn-outline-primary">
            Confirmar
            </button>
         </div>
    </div>
   
    @section Scripts {
    <script>
        let base64;
        const acceptTypes = ["image/png", "image/jpeg", "image/jpg"];
        let changePhoto = false;
        let changeData = false;

        const enableButton = () =>  $("#btnUpload").attr('disabled', false);
        const disableButton = () =>  $("#btnUpload").attr('disabled', true);
        const getMimeType = base64 => base64.split(";")[0].split(":")[1];
        const toBase64 = file => new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result)
        })
        const isFileValid = mimeType => acceptTypes.some(x => x === mimeType);

        const updatePhoto = () => {

              if (!base64) { return alert("Selecione uma imagem png ou jpeg.") }
            const mime = getMimeType(base64);
            if (!isFileValid(mime)) { return alert("Selecione uma imagem png ou jpeg.") }

            $.ajax({
                url: "@Url.Action("UpdatePhoto","User")",
                type: "POST",
                data: { file: base64 },
                dataType: "json",
                success: function (result) {
                    if (result.status === "success") {
                        //location.reload();
                    }
                },
                error: function (err) { console.log(err) }
            })
        }

        const updateData = () => {

            const username = $("#usernameInput").attr("value");
            const name = $("#nameInput").attr("value");

             $.ajax({
                url: "@Url.Action("UpdateData","User")",
                type: "POST",
                data: { username: username, name: name},
                dataType: "json",
                success: function (result) {
                    if (result.status === "success") {
                        //location.reload();
                    }
                },
                error: function (err) { console.log(err) }
            })
        }
        $("#profilePhoto").on("change", async (e) => {
           
            console.log(e.target.files);
            base64 = await toBase64(e.target.files[0]);
            const mime = getMimeType(base64);
            if (isFileValid(mime)) {
                 enableButton();
                changePhoto = true;
                $("#profileImg").attr("src", base64);
            } else {
                alert("Tipo de arquivo não aceito.");
                 $("#profilePhoto").attr("value", null);
            }
        })
        $("#btnUpload").on("click", () => {
           // if(!changePhoto && changeData) { return alert("Dados alterados.") }
           
           
            if(changePhoto){
                updatePhoto();
            }
            if(changeData){
                updateData();
            }

            if(changePhoto || changeData){
                alert("Dados atualizados com sucesso.")
                
                location.reload();
            }

        })

        $("#nameInput").on("dblclick", (e)=> {
           $("#nameInput").attr("readonly", false);
            enableButton();
            changeData = true;


        })
        $("#nameInput").on("change", (e) => {
             $("#nameInput").attr("value", e.target.value)
            var nameIsValid = $("#nameInput").attr("value").trim().length>0;
            console.log(e.target.value)
            if(nameIsValid){
                console.log('valid')
                changeData = true;
                enableButton();
            }else {
                changeData = false;
                disableButton();
                console.log('not valid')
            }

        })
        $("#usernameInput").on("dblclick", (e)=> {
           $("#usernameInput").attr("readonly", false);
            enableButton();
            changeData = true;
        })
       $("#usernameInput").on("change", (e) => {
           $("#usernameInput").attr("value", e.target.value)
            var usernameIsValid = $("#usernameInput").attr("value").trim().length>0;
            if(usernameIsValid){
                changeData = true;
                enableButton();
            }else {
                 changeData = false;
                disableButton();
            }

       })

        $("#emailInput").on("dblclick", (e)=> {
           alert("No momento ainda não é possível alterar o e-mail.")
        })
        $("#cpfInput").on("dblclick", (e)=> {
           alert("Não é possível alterar o CPF.")
        })

        $(document).ready(() => {

            const src = $("#profileImg").attr("src");
            if (!src) {
                $("#profileImg").attr("src", "/img/avatar.png");

            } 
        })

        $("#btnDelete").on("click", () => { 
            
           var result = confirm("Você tem certeza que deseja deletar sua conta? Esse tipo de ação é irreversível.")
            var email = $("#emailInput").attr("value");
           if(result){
               $.ajax({
                url: "@Url.Action("DeleteProfile","Auth")",
                type: "POST",
                data: { email: email },
                dataType: "json",
                success: function (result) {
                    if (result.status === "success") {
                        location.reload();
                    }
                },
                error: function (err) { console.log(err) }
            })

            window.location.href = "/Auth/SignOut"
         }
        })
    </script>
    }

</div>